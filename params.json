{"name":"Horus","tagline":"A simple yet powerful micro-framework for php5 >= php5.4","body":"# # Why a large framework ?\r\n> Why i need a large framework when i can use a `foundation` + `composer` ! .\r\n> Really we don't need a large framework, but we need a simple powerful modular `foundation` framework that helps me building small or large application and with the help of the `composer` ecosystem you can build a large framework .\r\n> We should know that a `framework` is not just a folder that contains some libraries but it is a better designed modular workflow that contains the application logic easily .\r\n\r\n\r\n# # Quick Demo\r\n\r\n\r\n```php\r\n<?php\r\n\r\n\trequire('Horus.php');\r\n\r\n\t(new Horus)->on('/', function(){\r\n\t\t$this->end(\"Hello World\");\r\n\t})->on('/page/:?', function($page){\r\n\t\t$this->end(sprintf('current param is %s', $page));\r\n\t})->on('POST /api/user', function(){\r\n\t\t$username = $this->body->username;\r\n\t\t$token = $this->query->token;\r\n\t\t// do some database operations\r\n\t})->on('/:*', function(){\r\n\t\t$this->end('404, cannot find any matched route !');\r\n\t});\r\n```\r\n\r\n# # Learn By Examples\r\n\r\n```php\r\n\r\n\t// load the Horus File\r\n\trequire('Horus.php');\r\n\r\n\t// create a new instance of Horus with default configs\r\n\t$app = new Horus;\r\n\r\n\t// or you can initialize it and set some options\r\n\t$app = new Horus\r\n\t([\r\n\t\t// whether your site is using ssl or not ?\r\n\t\t// true/false\r\n\t\t'secure' => true,\r\n\r\n\t\t// There are some methods that will helps you\r\n\t\t// generating some urls/routes\r\n\t\t// any route is about <schema>://<host>/<base>/<path>\r\n\t\t// and <base> is what this option affects\r\n\t\t// i.e: you may set it to 'index.php' if your server\r\n\t\t// doesn't support url-rewriting\r\n\t\t'base' => '/',\r\n\t\r\n\t\t// Do you want to apply some filters to the whole application\r\n\t\t// output ?, then you will use this options\r\n\t\t// it will has the current output as the first argument\r\n\t\t// and it must return any value to be the new output\r\n\t\t// i.e: function($output){ return trim($output); }\r\n\t\t'output.filter' => null,\r\n\r\n\t\t// sometimes you put Horus in a sub/nested-sub directories\r\n\t\t// and you rewrite from a virtual-url to the real path of horus index.php\r\n\t\t// so sometimes the SCRIPT_NAME is invalid so the PATH_INFO becomes invalid too !\r\n\t\t// so we introduce our new magic-config for horus\r\n\t\t// you will set it manually to your needs\r\n\t\t// for example, rewrite from \"/myapi/\" to \"api/index.php\"\r\n\t\t// and our main dir that will contains i.e \".htaccess\" is in \"docroot\"\r\n\t\t// so we must strip \"docroot/myapi/index.php\" from urls\r\n\t\t// NOTE: \"the default value for this is ($_SERVER['SCRIPT_NAME'])\"\r\n\t\t'path_info.strip' => \"docroot/myapi/index.php\",\r\n\t]);\r\n\r\n\t// You can access \"set/get\" options of the configs directly\r\n\t// after initialization using this object \"$app->configs\"\r\n\t// i.e\r\n\t$app->config->secure = false;\r\n\t$app->config->base = '/';\r\n\t$app->config->{'output.filter'} = function($output){\r\n\t\t\t// remove duplicated white-spaces\r\n\t\t\treturn preg_replace('/\\s+/', ' ', $output);\r\n\t};\r\n\t$app->config->myOwnConfig1 = 'value1';\r\n\r\n\t// send a header ?\r\n\t// Note: this will override any previously headers with the same fields\r\n\t// Note: fields are case in-sensitive\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->set('content-type', 'text/html; charset=UTF-8');\r\n\r\n\t// set multiple headers at once ?\r\n\t$app->set([\r\n\t\t'content-type' => 'text/plain',\r\n\t\t'x-powered-by' => 'Horus13, by Mohammed Al Ashaal'\r\n\t]);\r\n\r\n\t// but how about appending header fields\r\n\t// i.e: sending a header field multiple times\r\n\t// with no overriding ?\r\n\t// Note: fields are case in-sensitive\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->append('field-name', 'value');\r\n\r\n\t// you can also do it multiple times at once\r\n\t// like $app->set([...])\r\n\t$app->append([\r\n\t\t// ...\r\n\t]);\r\n\r\n\t// remove header field(s) from header-list ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->remove('field-name');\r\n\r\n\t// remove multiple fields ?\r\n\t$app->remove(['field-name', 'content-type']);\r\n\t\r\n\t// set the http status code ?\r\n\t// this method is an alias for 'http_response_code()'\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->status(404);\r\n\r\n\t// write a message to the output buffer ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->send('this is a message');\r\n\r\n\t// you are writing a RESTful api\r\n\t// and want to send a json content\r\n\t// with json headers just in one line ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->json([\r\n\t\t'state' => 'ok',\r\n\t\t'message' => 'this is ok message'\r\n\t]);\r\n\r\n\t// Do you want to send a jsonp response and its headers ?\r\n\t// i.e 'cb(\"some data\")'\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->jsonp('some data'); // outputs> cb('some data')\r\n\r\n\t// Do you want to send a jsonp response with custom callback name ?\r\n\t$app->jsonp('some data', 'mycb'); // outputs> mycb('some data')\r\n\r\n\t// clean the output ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->clear();\r\n\r\n\t// set cookie ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->cookie('name', 'value');\r\n\r\n\t// set a cookie with some options ?\r\n\t$app->cookie('name', 'value', \r\n\t[\r\n\t\t// cookie domain ?\r\n\t\t'domain'    =>  null,\r\n\r\n\t\t// cookie path ? \r\n\t\t'path'      =>  '/',\r\n\t\r\n\t\t// when it will expires ?\r\n\t\t'expires'   =>  0,\r\n\t\r\n\t\t// whether it will be sent over ssl or not\r\n\t\t// this is automatically set with the value of\r\n\t\t// $app->config->secure\r\n\t\t// 'secure'    =>  (bool) $this->config->secure,\r\n\t\r\n\t\t// whether to send it over httpOnly or not ?\r\n\t\t'httpOnly'  =>  true\r\n\t]);\r\n\r\n\t// render a file, i.e: 'html' and \"optionally\" set some vars in its scope ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->render('path/to/file.html', ['var_1' => 'value']);\r\n\r\n\t// render multiple files ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->render(['path/to/file-1.html', 'path/to/file-2.html']);\r\n\r\n\t// redirect to another url with 302 code \"temp redirect\" ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->redirect('/new-page');\r\n\r\n\t// redirect with 301 code \"permanent redirect\" ?\r\n\t$app->redirect('/new-page', true);\r\n\r\n\t// end the response ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->end();\r\n\r\n\t// end the response with some message ?\r\n\t$app->end('some data');\r\n\r\n\t// end the response with a message and status code with headers ?!\r\n\t$app->end('data', 200, ['content-type' => 'text/html']);\r\n\r\n\t// register a function that will be triggered when its pattern matches\r\n\t// the current path ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->on('/path-1', function(){\r\n\t\t// $this ?!!!\r\n\t\t// yes, any listener 'callback' can access\r\n\t\t// the '$app' scope using '$this'\r\n\t\t$this->end('we are in path-1');\r\n\t});\r\n\r\n\t// register a function that will be triggered when its pattern matches\r\n\t// the current path and a certain request method ?\r\n\t$app->on('GET /my-path', function(){\r\n\t\t$this->end('we are in GET /my-path');\r\n\t});\r\n\r\n\t// register a function that will be triggered when its pattern matches\r\n\t// the current path and a certain request methods ?\r\n\t$app->on('GET|POST|PUT /my-path', function(){\r\n\t\t$this->end('we are in GET, POST or PUT /my-path');\r\n\t});\r\n\r\n\t// named route ?\r\n\t// /:? --> means '([^\\/]+)'\r\n\t// /:* --> means '?(.*)'\r\n\t$app->on('/page/:?', function($page){\r\n\t\t$this->end('we are in page --> ' . $page);\r\n\t})->on('/posts/:?/([0-9]+)', function($category, $num){\r\n\t\t$this->end('first-param: ' . $category . ' and second is: ' . $num);\r\n\t});\r\n\r\n    // hmmmmmmmmmm, how about rewriting \"aliasing\" ?!! o.O\r\n    // rewrite from '/api/v1' to '/api/v2'\r\n    // NOTE: any rewrite operation must be before any routing operation\r\n    $app->rewrite('/api/v1', '/api/v2');\r\n\r\n    // rewrite with \"regex\" ?\r\n    // \"will rewrite from /api/v1/<anything>\" to \"/api/v2/<anything>\"\r\n    $app->rewrite('/api/v1/?(.+)', '/api/v2/$1'); // !!!!!! ;)\r\n\r\n    // vhost ?\r\n    // NOTE: if you want to use vhost, then put it before any basic routes\r\n    // because Horus engine is using the frist matched route .\r\n    // [basic, vhost]\r\n    $app->vhost('([^\\.]).locahost.com', function($sub){\r\n        $this->on('/', function(){\r\n            $this->end($sub . '.localhost.com' . ' -> index');\r\n        });\r\n    });\r\n\r\n\t// Do you want to get a url for a local file ?\r\n\t// its schema will be 'http(s)' based on your configurations\r\n\t// of '$app->config->secure'\r\n\t$jquery = $app->url('/assets/js/jquery.min.js');\r\n\r\n    // a change the ->url() host ?\r\n    $jQuery = $app->url('/assets/js/jQuery.js', 'cdn.myownhost.com');\r\n\r\n\t// Do you want to get a url for  a local route ?\r\n\t// its schema will be 'http(s)' based on your configurations\r\n\t// of '$app->config->secure' and its base also \r\n\t// '$app->config->base'\r\n\t$my_path = $app->route('/my-path');\r\n\r\n    // a change the ->route() host ?\r\n    $jQuery = $app->url('/my-path', 'sub.myownhost.com');\r\n\r\n\t// register a source directory for PSR-4 based packages ?\r\n\t// Note: this method return '$this' for chaining purposes\r\n\t$app->autoload('/packages/');\r\n\r\n\t// register multiple directories ?\r\n\t$app->autoload(['/packages', '/components']);\r\n\r\n\t// Do you want to access the _GET ?\r\n\t// i.e: '?id=4&user[firstName]=Mohammed&user[lastName]=Al Ashaal'\r\n\t$id = $app->query->id;\r\n\t$firstName = $app->query->user->firstName;\r\n\t$lastName = $app->query->user->lastName;\r\n\r\n\t// Do you want to access the request body of 'POST/PUT/...'\r\n\t// like what we did with '$app->query' ?\r\n\t// it automatically parses 'JSON/XML/urlencoded' data as an object\r\n\t$app->body->{'keyName'};\r\n\r\n\t// access cookies like them too ?\r\n\t$app->cookies->{'keyName'};\r\n \r\n    // access \"POST/GET\" (body/query) vars !!\r\n    $app->request->{'keyName'};\r\n \r\n    // you can use '$app' itself as an object container\r\n    $app->k1 = 'v1';\r\n    $app->mycb = function(){\r\n        // $this !!!! ;)\r\n        $this->end($this->k1);\r\n    };\r\n    $app->mycb();\r\n```\r\n","google":"UA-66350360-1","note":"Don't delete this file! It's used internally to help with page regeneration."}