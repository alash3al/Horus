{"name":"Horus","tagline":"A Micro PHP 5 Framework Perfect For Getting Programmers Start","body":"### #Horus 12\r\nAn imporved layer for any php application\r\n\r\n### #Overview\r\nIn php world, there are many and many frameworks, but there are no simple and standalone\r\nlayers that is just a wrapper for any web application, and this is Horus .  \r\nHorus is a very simple layer/foundation for any \"any\" web application, it will help you in \r\nrapid apps developments .  \r\n\r\n```php\r\n<?php\r\n\r\n    require(\"Horus.php\");\r\n\r\n    (new \\Horus\\App)->on('/', function($request, $response){\r\n        $response->send(\"hello world\");\r\n        $response->end();\r\n    })->on('GET|POST /test', function($request, $response){\r\n        $response->end(\"What is this ?\");\r\n    });\r\n\r\n?>\r\n```\r\n\r\n### #Contents\r\n\r\n- **Download**\r\n- **Prorotype**     \r\n- **App**    \r\n- **Request**  \r\n- **Response** \r\n\r\n### #Download\r\n\r\n> `composer require alash3al/horus`  \r\n\r\n> `git clone https://github.com/alash3al/Horus.git`  \r\n\r\n> `https://github.com/alash3al/Horus/archive/master.zip`  \r\n\r\n\r\n### #Prototype\r\n> just an improved `stdClass` that supports closure  \r\n\r\n```php\r\n    require \"Horus.php\";\r\n\r\n    $proto = new \\Horus\\Prototype;\r\n\r\n    $proto->key = \"value\";\r\n    $proto->func = function() use($proto) {\r\n        print $proto->key;\r\n        return $proto;\r\n    };\r\n```\r\n\r\n### #App\r\n> Our main class that handles request and response ..  \r\n\r\n```php\r\n\r\n    require \"Horus.php\";\r\n\r\n    $app = new \\Horus\\App;\r\n\r\n    // you register a callback for a uri\r\n    // when the user access it, it will be distpatched\r\n    $app->on('/index', function($req, $res){\r\n        $res->send(\"index\");\r\n        // we don't need any other route\r\n        // so we will end the app\r\n        $res->end();\r\n    });\r\n\r\n    // for a certain method ?\r\n    $app->on('POST /test', function($req, $res){\r\n        $res->end(\"post request on '/test'\");\r\n    });\r\n\r\n    // multiple methods?\r\n    $app->on('POST|GET /t', function($req, $res){\r\n        $res->end('will work for \"POST /t\" and \"GET /t\"');\r\n    });\r\n\r\n    // unknown/dynamic params ?\r\n    $app->on('/user/?/settings', function($req, $res, $id){\r\n        // yes, the dynamic args, will be passed with the \"$req, $res\"\r\n        $res->end(\"you want the settings of the user {$id}\");\r\n    });\r\n\r\n    // more ?\r\n    $app->on('/user/?/set/?', function($req, $res, $id, $section){\r\n        $res->end(\"you want the settings of {$section} for the user {$id}\");\r\n    });\r\n\r\n    // wildcards ?\r\n    $app->on('/test/*', function($req, $res, $path){\r\n        $res->end(\"you are in 'test/{$path}'\");\r\n    });\r\n\r\n    // group of routes ?\r\n    $app->group(\"/group\", function($req, $res, $app){\r\n        // group/page-1\r\n        $app->on('/page-1', function(){});\r\n        // you can create nested groups too .\r\n    });\r\n\r\n    // vhosts ?\r\n    $app->vhost(\"user-*.my.com\", function($req, $res, $app, $uid){\r\n        // you can apply routes here too\r\n    });\r\n\r\n\t// lets put this at the end of our routes\r\n\t// so if \"PHP\" didn't find the right route\r\n\t// it will display '404'\r\n\t$app->on('/*', function($req, $res){\r\n\t\t$res->end(\"404 not found\");\r\n\t});\r\n    \r\n``` \r\n\r\n### #Request\r\n\r\n> Manage the input easily  \r\n\r\n```php\r\n    // instead of _GET\r\n    // a wrapper\r\n    // ?k=v\r\n    $req->query->k; //> \"v\";\r\n    // ?k[k1][k2]=v2\r\n    $req->k->k1->k2; //> \"v2\"\r\n\r\n    // for _POST, PUT, DELETE, or any request body\r\n    // POST -> x=v&b=c\r\n    $req->body->x; //> v;\r\n\r\n    // $_COOKIE ?\r\n    // $_COOKIE['key']\r\n    $req->cookies->key;\r\n\r\n    // get the current request method\r\n    $req->method;\r\n\r\n    // the hostname of the host headers\r\n    // for example.com:8080\r\n    // hostname is example.com\r\n    $req->hostname;\r\n\r\n    // the request path \"/x/y/z/\"\r\n    // it also the same as \"PATH_INFO\"\r\n    $req->path; //> x/y/z\r\n\r\n    // headers ?\r\n    $req->headers->host; //> returns the host headers\r\n    $req->headers->user_agent //> returns the user agent value\r\n    // and so ...\r\n```\r\n\r\n### #Response\r\n\r\n> Useful methods for handling the output \r\n\r\n```php\r\n    // Response object\r\n\r\n    // set a http header [will replace any header with the same field]\r\n    // this is case in-sensitive\r\n    // it return $this, usefull for chaining\r\n    $res->set('content-type', 'text/html');\r\n    // multiple ?\r\n    $res->set([\r\n        'x-header-1'    =>  'value',\r\n        'x-header-2'    =>  'value2'\r\n    ]);\r\n\r\n    // don't want to replace ?\r\n    // just use append\r\n    // also returns $this\r\n    $res->append('x-header3', 'value3');\r\n    $res->append([\r\n        /*\r\n            same as set\r\n            array of key value paris\r\n        */\r\n    ]);\r\n\r\n    // set the status code\r\n    $res->status(404)->set('x-code', '404 not found');\r\n\r\n    // write to the client\r\n    $res->send('just a message');\r\n    // or json ?\r\n    // json will also send the content-type: application/json\r\n    $res->send([\r\n        'x' => 'y'\r\n    ]);\r\n\r\n    // json too ..\r\n    // + content-type: application/json\r\n    $res->json([\r\n        // ...\r\n    ]);\r\n\r\n    // jsonp\r\n    // + content-type: application/json\r\n    $res->jsonp([\r\n        // ..\r\n    ]); //> default jsonp callback is 'callback'\r\n\r\n    // change it ?\r\n    $res->jsonp([], 'myfunction');\r\n\r\n    // setcookie\r\n    $res->cookie('name', 'value', [/* options here */]);\r\n    /*\r\n        cookie options\r\n        'domain'    =>  empty by default\r\n        'path'      =>  directory of the main index file\r\n        'expires'   =>  zero by default\r\n        'secure'    =>  horus detect it\r\n        'httpOnly'  =>  true by default\r\n    */\r\n\r\n    // cache web page for a $ttl\r\n    // cache for 10 seconds\r\n    // using last-modified\r\n    $res->cache(10);\r\n\r\n    // cache using expires after 10 seconds from now\r\n    $res->expires(time() + 10);\r\n\r\n    // render file ?\r\n    $res->render('filename.html');\r\n    // you can pass vars\r\n    $res->render('filename.html', ['var' => 'c']);\r\n    // you can use multiple files\r\n    $res->render([\r\n        'file1.html',\r\n        'file2.html'\r\n    ], [\r\n        'var1'  =>  'val1'\r\n    ]);\r\n\r\n    // redirect ? \"temporarily\"\r\n    $res->redirect('/target.php');\r\n\r\n    // redirect ? \"permanent\"\r\n    $res->redirect(\"/to.php\", true);\r\n\r\n    // get a direct url for a local file ?\r\n    $app->urlFor(\"/assets/style.css\");\r\n    // by default it starts with \"http\",\r\n    // but you want to get a secure url \"starts with https\" ?\r\n    $app->urlFor(\"/assets/style.css\", true);\r\n\r\n    // get a url for an internal route ?\r\n    // for \"/user/1/settings\"\r\n    $app->routeFor(\"user/1/settings\");\r\n    // it will return a clean and simple url\r\n    // but if your server does not support rewriting\r\n    $app->routeFor(\"user/1/settings\", false);\r\n    // will use \"index.php/\" as a proxy\r\n    // do you want a secure clean url ?\r\n    $app->routeFor(\"user/1/settings\", true, true);\r\n\r\n    // clear the output\r\n    $res->clear();\r\n\r\n    // now the time to end the response\r\n    $res->end();\r\n    // or end with some text\r\n    $res->end(\"By\");\r\n    // or end with some text and status code\r\n    $res->end(\"404 not found\", 404);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}